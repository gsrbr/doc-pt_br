<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d6f54016d62904cfd8200604aadd5e3f0d9bad97 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="function.preg-match" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_match</refname>
  <refpurpose>Realiza uma correspondência com expressão regular</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>preg_match</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">matches</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Pesquisa <parameter>subject</parameter> por uma correspondência à expressão
   regular informada em <parameter>pattern</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       A expressão sendo procurada, como uma string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       A string de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>matches</parameter></term>
     <listitem>
      <para>
       Se <parameter>matches</parameter> for informada, será preenchida com os
       resultados da pesquisa. <varname>$matches[0]</varname> contéra o
       texto que correspondeu à expressão inteira, <varname>$matches[1]</varname>
       terá o texto que correspondeu à primeira sub-expressão entre parênteses
       capturada, e assim por diante.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> pode ser uma combinação das seguintes constantes:
       <variablelist>
        <varlistentry>
         <term><constant>PREG_OFFSET_CAPTURE</constant></term>
         <listitem>
          <para>
           Se esta constante for passada, para cada correspondência o deslocamento (em bytes)
           da string também será retornado. Observe que isto modifica o valor de
           <parameter>matches</parameter> para um array de arrays onde cada elemento é
           um array que consiste na string correspondida no elemento <literal>0</literal>
           e seu deslocamento na string <parameter>subject</parameter> no elemento
           <literal>1</literal>.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match('/(foo)(bar)(baz)/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
            </programlisting>
            &example.outputs;
            <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => foobarbaz
            [1] => 0
        )

    [1] => Array
        (
            [0] => foo
            [1] => 0
        )

    [2] => Array
        (
            [0] => bar
            [1] => 3
        )

    [3] => Array
        (
            [0] => baz
            [1] => 6
        )

)
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_UNMATCHED_AS_NULL</constant></term>
         <listitem>
          <para>
           Se esta constante for passada, sub-expressões não correspondidas são reportadas como &null;;
           caso contrário elas são reportadas como <type>string</type>s vazias.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match('/(a)(b)*(c)/', 'ac', $matches);
var_dump($matches);
preg_match('/(a)(b)*(c)/', 'ac', $matches, PREG_UNMATCHED_AS_NULL);
var_dump($matches);
?>
]]>
            </programlisting>
            &example.outputs;
            <screen>
<![CDATA[
array(4) {
  [0]=>
  string(2) "ac"
  [1]=>
  string(1) "a"
  [2]=>
  string(0) ""
  [3]=>
  string(1) "c"
}
array(4) {
  [0]=>
  string(2) "ac"
  [1]=>
  string(1) "a"
  [2]=>
  NULL
  [3]=>
  string(1) "c"
}
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       Normalmente, a pesquisa começa no início da string de entrada.
       O parâmetro opcional <parameter>offset</parameter> pode ser usado para
       especificar o deslocamento alternativo (em bytes) a partir do qual a pesquisa será iniciada.
      </para>
      <note>
       <para>
        Usar <parameter>offset</parameter> não é equivalente a passar
        <code>substr($subject, $offset)</code> para
        <function>preg_match</function> no lugar da string de entrada,
        porque <parameter>pattern</parameter> pode conter afirmações como
        <emphasis>^</emphasis>, <emphasis>$</emphasis> ou
        <emphasis>(?&lt;=x)</emphasis> que depende da string inteira. Compare:
        <informalexample>
         <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
print_r($matches);
?>
]]>
         </programlisting>
         &example.outputs;
         <screen>
<![CDATA[
Array
(
)
]]>
         </screen>
         <para>
          enquanto este exemplo
         </para>
         <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, substr($subject,3), $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
         </programlisting>
         <para>
          produz
         </para>
         <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => def
            [1] => 0
        )

)
]]>
         </screen>
         <para>
          Alternativamente, para evitar o uso de <function>substr</function>, use a afirmação
          <literal>\G</literal> ao invés da âncora <literal>^</literal>, ou
          o modificador <literal>A</literal>, ambos funcionam com o
          parâmetro <parameter>offset</parameter>.
         </para>
        </informalexample>
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_match</function> retorna 1 se <parameter>pattern</parameter>
   corresponder a <parameter>subject</parameter>, 0 se não corresponder,&return.falseforfailure;.
  </para>
  &return.falseproblem;
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pcre.pattern.warning;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        A constante <constant>PREG_UNMATCHED_AS_NULL</constant> agora é suportada para o parâmetro
        <parameter>$flags</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Encontrando a string de texto "php"</title>
    <programlisting role="php">
<![CDATA[
<?php
// A letra "i" após o delimitador da expressão indica uma pesquisa insensível a maiúsculas/minúsculas
if (preg_match("/php/i", "PHP is the web scripting language of choice.")) {
    echo "Uma correspondência foi encontrada.";
} else {
    echo "Uma correspondência foi encontrada.";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Encontrando a palavra "web"</title>
    <programlisting role="php">
<![CDATA[
<?php
/* \b na expressão indica uma borda de palavra, portanto somente a palavra
 * separada "web" é correspondida, e não uma palavra que contém "web" como "webbing" ou "cobweb" */
if (preg_match("/\bweb\b/i", "PHP is the web scripting language of choice.")) {
    echo "Uma correspondência foi encontrada.";
} else {
    echo "Uma correspondência foi encontrada.";
}

echo "\n";

if (preg_match("/\bweb\b/i", "PHP is the website scripting language of choice.")) {
    echo "Uma correspondência foi encontrada.";
} else {
    echo "Uma correspondência foi encontrada.";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Obtendo o nome de domínio de uma URL</title>
    <programlisting role="php">
<![CDATA[
<?php
// obtem o nome do servidor da URL
preg_match('@^(?:http://)?([^/]+)@i',
    "http://www.php.net/index.html", $matches);
$host = $matches[1];

// obtém os últimos dois segmentos do nome do servidor
preg_match('/[^.]+\.[^.]+$/', $host, $matches);
echo "nome de domínio é: {$matches[0]}\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
nome de domínio é: php.net
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Usando sub-expressão nomeada</title>
    <programlisting role="php">
<![CDATA[
<?php

$str = 'foobar: 2008';

preg_match('/(?P<name>\w+): (?P<digit>\d+)/', $str, $matches);

/* Alternativa */
// preg_match('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);

print_r($matches);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => foobar: 2008
    [name] => foobar
    [1] => foobar
    [digit] => 2008
    [2] => 2008
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <tip>
   <para>
    Não use <function>preg_match</function> se for requerido apenas verificar se
    uma string está contida em outra. Use
    <function>strpos</function> em seu lugar, pois será mais rápida.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">Expressões PCRE</link></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_match_all</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_split</function></member>
    <member><function>preg_last_error</function></member>
    <member><function>preg_last_error_msg</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
