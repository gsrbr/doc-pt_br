<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 871b71764cdca8238069f27436d96011a6a2cb36 Maintainer: leonardolara Status: ready -->
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry xml:id="function.db2-prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_prepare</refname>
  <refpurpose>
   Prepara uma instrução SQL para ser executada
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>resource</type><type>false</type></type><methodname>db2_prepare</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>


  <para>
   <function>db2_prepare</function> cria uma instrução SQL preparada que pode
   incluir 0 ou mais marcadores de parâmetros (caracteres <literal>?</literal>)
   representando parâmetros para entrada, saída ou entrada/saída. Pode-se passar
   parâmetros para a instrução preparada usando
   <function>db2_bind_param</function>, ou apenas para valores de entrada, como um array
   passado para <function>db2_execute</function>.
  </para>
  <para>
   Existem três vantagens principais em usar instruções preparadas em uma
   aplicação:
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>Desempenho</emphasis>: quando uma instrução é preparada, o
      servidor de banco de dados cria um plano de acesso otimizado para recuperar dados com
      essa instrução. Subsequentemente, emitir a instrução preparada com
      <function>db2_execute</function> permite que as instruções reutilizem esse
      plano de acesso e evita a sobrecarga de criar dinamicamente um novo plano de acesso
      para cada instrução emitida.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Segurança</emphasis>: quando uma instrução é preparada, podem ser
      incluídos marcadores de parâmetros para valores de entrada. Quando uma
      instrução preparada é executada com valores de entrada para marcadores, o servidor de banco de dados verifica
      cada valor de entrada para garantir que o tipo corresponda à definição da coluna ou
      definição do parâmetro.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Funcionalidade avançada</emphasis>: Os marcadores de parâmetros não apenas
      permitem que sejam passados valores de entrada para instruções SQL preparadas, eles também
      permitem que sejam recuperados parâmetros OUT e INOUT de procedimentos armazenados
      usando <function>db2_bind_param</function>.
     </para>
    </listitem>
   </itemizedlist>
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       Uma variável de recurso de conexão de banco de dados válida, conforme retornada de
       <function>db2_connect</function> ou <function>db2_pconnect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       An SQL statement, optionally containing one or more parameter markers..
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Um array associativo contendo opções de instrução. Você pode usar este
       parâmetro para solicitar um cursor rolável em servidores de banco de dados que
       suportam esta funcionalidade.
      </para>
      <para>
       Para uma descrição das opções de instrução válidas, consulte
       <function>db2_set_option</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um recurso de instrução se a instrução SQL foi analisada com sucesso e
   preparada pelo servidor de banco de dados. Retorna &false; se o servidor de banco de dados
   retornou um erro. Pode-se determinar qual erro foi retornado chamando
   <function>db2_stmt_error</function> ou <function>db2_stmt_errormsg</function>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Preparando e executando uma instrução SQL com marcadores de parâmetros</title>
    <para>
     O exemplo a seguir prepara uma instrução INSERT que aceita quatro
     marcadores de parâmetros e, em seguida, itera sobre um array de arrays contendo os
     valores de entrada a serem passados ​​para <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$animals = array(
    array(0, 'cat', 'Pook', 3.2),
    array(1, 'dog', 'Peaches', 12.3),
    array(2, 'horse', 'Smarty', 350.0),
);

$insert = 'INSERT INTO animals (id, breed, name, weight)
    VALUES (?, ?, ?, ?)';
$stmt = db2_prepare($conn, $insert);
if ($stmt) {
    foreach ($animals as $animal) {
        $result = db2_execute($stmt, $animal);
    }
}
?>
]]>
    </programlisting>
   </example>
   <!--
   <example>
    <title>Preventing SQL injection attacks using parameter markers</title>
     <para>
      Parameter markers make it impossible for a malicious user of your
      application to pass input values that map to more than one database
      field or stored procedure parameter. The following example demonstrates
      a common tactic for attacking database-driven Web applications, SQL
      injection, which takes advantage of applications that often simply
      interpolate the input values from a user directly into an SQL statement
      rather than defining parameter markersbinding the input values to
      those parameter markers.
     </para>
     <para>
      In the following example, assume that the PHP script has been placed on
      a publicly accessible Web server and the application provides
      different levels of access for different users. We shall also assume
      that the application issues an SQL statement that updates the privilege
      level of a newly registered user to the lowest level, taking the user ID
      from a GET input variable. In the following example, a malicious user
      can pass <userinput>userid=0+OR+1=1</userinput> (instead of the expected
      <userinput>userid=0</userinput>) to trick your application into
      setting the privilege level of every user in the database to the lowest
      level.
     </para>
    <programlisting role="php">
<![CDATA[
<?php

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
]]>
    </screen>
   </example>
   -->
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_bind_param</function></member>
    <member><function>db2_execute</function></member>
    <member><function>db2_stmt_error</function></member>
    <member><function>db2_stmt_errormsg</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
