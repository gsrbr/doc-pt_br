<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: leonardolara Status: ready -->
<reference xml:id="class.variant" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <titleabbrev>variant</titleabbrev>
 <title>Classe variant</title>
 <partintro>

<!-- {{{ variant intro -->
  <section xml:id="variant.intro">
   &reftitle.intro;
   <para>
    A VARIANT é o equivalente do COM ao zval do PHP; é uma estrutura que
    pode conter um valor com uma variedade de diferentes tipos possíveis. A classe variant
    fornecida pela extensão COM permite mais controle sobre
    a maneira como o PHP passa valores de e para o COM.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="variant.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <classname>variant</classname>
    </ooclass>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.variant')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='variant'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="class.variant.examples">
   <title>Exemplos de variant</title>
   <para>
    <example xml:id="com.variant.example.php5">
     <title>Exemplo de variant </title>
     <programlisting role="php">
<![CDATA[
<?php
$v = new variant(42);
print "O tipo é " . variant_get_type($v) . "<br/>";
print "O valor é " . $v . "<br/>";
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Ao retornar
     um valor ou buscar uma propriedade variant, a variant é convertida em um
     valor PHP somente quando há um mapeamento direto entre os tipos que
     não resultaria em perda de informação. Em todos os outros casos, o resultado é
     retornado como uma instância da classe variant. Pode-se forçar o PHP a
     converter ou avaliar a variant como um tipo nativo do PHP usando um operador
     de conversão explicitamente, ou convertendo implicitamente para uma string
     usando a função <function>print</function>. Pode-se usar a ampla gama de funções
     da variant para realizar operações aritméticas em variants sem forçar uma
     conversão ou correr o risco de perda de dados.
    </para>
   </note>
   <para>
    Consulte também <function>variant_get_type</function>.
   </para>
  </section>

 </partintro>

 &reference.com.entities.variant;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
