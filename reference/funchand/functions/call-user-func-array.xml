<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5832a97c699c5e1bc808ee900447fe751af0d540 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.call-user-func-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>call_user_func_array</refname>
  <refpurpose>Chama uma função de retorno com um array de parâmetros</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>call_user_func_array</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam><type>array</type><parameter>args</parameter></methodparam>
  </methodsynopsis>
  <para>
   Chama a função de retorno do definida no primeiro parâmetro <parameter>callback</parameter> com
   os parâmetros informados no parâmetro <parameter>args</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       A função do tipo <type>callable</type> a ser chamada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       Os parâmetros a serem passados à função de retorno, como um array.
      </para>
      <para>
        Se as chaves do array de <parameter>args</parameter> forem todas numéricas,
        elas serão ignoradas e cada elemento será passado à
        função informada no parâmetro <parameter>callback</parameter> como um argumento potencial, em
        ordem.
      </para>
      <para>
        Se qualquer chave do array <parameter>args</parameter> for uma string,
        esses elementos serão passados à função informada no parâmetro <parameter>callback</parameter>
        como argumentos nomeados, com o mesmo nome dado pela chave.
      </para>
      <para>
        É um erro fatal quando uma chave numérica no array do parâmetro <parameter>args</parameter>
        aparece depois de uma chave string, ou se uma chave string não
        corresponder a nenhum parâmetro da função informada em <parameter>callback</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o mesmo valor retornado pela função de retorno, ou &false; em caso de erro.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        As chaves de <parameter>args</parameter> agora serão interpretadas como nomes de parâmetros, ao invés de serem silenciosamente ignorados.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>call_user_func_array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function foobar($arg, $arg2) {
    echo __FUNCTION__, " recebeu $arg e $arg2\n";
}
class foo {
    function bar($arg, $arg2) {
        echo __METHOD__, " recebeu $arg e $arg2\n";
    }
}


// Chama a função foobar() com 2 argumentos
call_user_func_array("foobar", array("um", "dois"));

// Chama o método $foo->bar() com 2 argumentos
$foo = new foo;
call_user_func_array(array($foo, "bar"), array("três", "quatro"));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foobar recebeu um e dois
foo::bar recebeu três e quatro
]]>
    </screen>
   </example>
   <example>
    <title><function>call_user_func_array</function> usando espaço de nomes</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function test($name) {
        print "Olá, {$name}!\n";
    }
}

call_user_func_array(__NAMESPACE__ .'\Foo::test', array('João'));

call_user_func_array(array(__NAMESPACE__ .'\Foo', 'test'), array('Felipe'));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Olá, João!
Olá, Felipe!
]]>
    </screen>
   </example>
   <example>
    <title>Usando função lambda</title>
    <programlisting role="php">
<![CDATA[
<?php

$func = function($arg1, $arg2) {
    return $arg1 * $arg2;
};

var_dump(call_user_func_array($func, array(2, 4)));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(8)
]]>
    </screen>
   </example>
   <example>
    <title>Passando valores por referência</title>
    <programlisting role="php">
<![CDATA[
<?php

function mega(&$a){
    $a = 55;
    echo "função mega \$a=$a\n";
}
$bar = 77;
call_user_func_array('mega',array(&$bar));
echo "global \$bar=$bar\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
função mega $a=55
global $bar=55
]]>
    </screen>
   </example>
   <example>
    <title><function>call_user_func_array</function> usando parâmetros nomeados</title>
    <programlisting role="php">
<![CDATA[
<?php
function foobar($primeiro, $segundo) {
    echo __FUNCTION__, " recebeu $primeiro e $segundo\n";
}

// Chama a função foobar() com argumentos nomeados em ordem não posicional
call_user_func_array("foobar", array("segundo" => "dois", "primeiro" => "um"));

// Chama a função foobar() com um argumento nomeado
call_user_func_array("foobar", array("foo", "segundo" => "bar"));

// Erro fatal: Não é possível usar argumento posicional após um argumento nomeado
call_user_func_array("foobar", array("primeiro" => "um", "bar"));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foobar recebeu um e dois
foobar recebeu foo e bar

Fatal error: Uncaught Error: Cannot use positional argument after named argument
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.func-callback-exceptions;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member><methodname>ReflectionFunction::invokeArgs</methodname></member>
    <member><methodname>ReflectionMethod::invokeArgs</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
