<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 44bcc82c7d1a0dea5578093833d3172c0c742f5a Maintainer: leonardolara Status: ready -->
<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetchAll</refname>
  <refpurpose>
   Busca as linhas remanescentes de um conjunto de resultados
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_COLUMN</initializer></methodparam>
   <methodparam><type>int</type><parameter>column</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_CLASS</initializer></methodparam>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter>constructorArgs</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_FUNC</initializer></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Controla o conteúdo do array retornado como documentado em
       <methodname>PDOStatement::fetch</methodname>.
       O padrão é <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
       (cujo padrão é <constant>PDO::FETCH_BOTH</constant>).
      </para>
      <para>
       Para retornar um array que consiste em todos os valores de uma única coluna do
       conjunto de resultados, especifique <constant>PDO::FETCH_COLUMN</constant>. Pode-se
       especificar uma coluna qualquer com o parâmetro
       <parameter>column</parameter>.
      </para>
      <para>
       Para indexar o array resultante pelo valor de uma determinada coluna (em vez de
       números consecutivos), coloque o nome desta coluna primeiro na lista de
       colunas no SQL e use <constant>PDO::FETCH_UNIQUE</constant>.
       Esta coluna deve conter apenas valores exclusivos ou alguns dados serão perdidos.
      </para>
      <para>
       Para agrupar resultados na forma de um array tridimensional indexado por valores
       de uma coluna especificada, coloque o nome desta coluna primeiro na
       lista de colunas no SQL e use <constant>PDO::FETCH_GROUP</constant>.
      </para>
      <para>
       Para agrupar resultados na forma de um array bidimensional,
       use a operação OR binária com <constant>PDO::FETCH_GROUP</constant> e
       <constant>PDO::FETCH_COLUMN</constant>.
       Os resultados serão agrupados pela primeira coluna, com o valor do elemento do array
       sendo um array de lista das entradas correspondentes da segunda coluna.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   A lista a seguir apresenta parâmetros dinâmicos que dependem do modo de busca.
   Eles não podem ser usados com parâmetros nomeados.
   <variablelist>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       Usado com <constant>PDO::FETCH_COLUMN</constant>. Retorna a coluna indicada
       com índice iniciando em 0.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class</parameter></term>
     <listitem>
      <para>
       Usado com <constant>PDO::FETCH_CLASS</constant>. Retorna instâncias da classe
       especificada, mapeando colunas de cada linha a propriedades nomeadas na classe.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>constructorArgs</parameter></term>
     <listitem>
      <para>
       Argumentos de construtor de classe customizado quando o parâmetro <parameter>mode</parameter>
       for <constant>PDO::FETCH_CLASS</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Usado com <constant>PDO::FETCH_FUNC</constant>. Retorna os resultados da chamada à
       função especificada, usando cada coluna do registro como parâmetro na chamada.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <methodname>PDOStatement::fetchAll</methodname> retorna um array contendo
   todas os registros remanescentes no conjunto de resultados O array representa cada
   registro como um array de valores de coluna ou um objeto com propriedades
   correspondentes a cada nome de coluna. Um array vazio é retornado se não
   houver resultados na busca.
  </para>
  <para>
   Usar este método para burcar conjuntos de resultados grandes resultará em uma alta
   demanda no sistema e possivelmente em recursos de rede. Ao invés de recuperar
   todos os dados e manipulá-los no PHP, deve ser considerado usar o servidor de
   banco de dados para manipular os conjuntos de resultados. Por exemplo, usando as cláusulas
   WHERE e ORDER BY no SQL para restringir resultados antes de recuperá-los e
   processá-los com o PHP.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Este método agora sempre retornará um &array;, enquanto antes poderia retornar &false;
       em caso de falha.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Buscando todos os registros remanescentes em um conjunto de resultados</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Busca todos os registros remanescentes em um conjunto de resultados */
print "Busca todos os registros remanescentes em um conjunto de resultados:\n";
$result = $sth->fetchAll();
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Busca todos os registros remanescentes em um conjunto de resultados:
Array
(
    [0] => Array
        (
            [name] => apple
            [0] => apple
            [colour] => red
            [1] => red
        )

    [1] => Array
        (
            [name] => pear
            [0] => pear
            [colour] => green
            [1] => green
        )

    [2] => Array
        (
            [name] => watermelon
            [0] => watermelon
            [colour] => pink
            [1] => pink
        )

)
]]>
    </screen>
   </example>
   <example><title>Buscando todos os valores de uma única coluna de um resultado</title>
    <para>
     O exemplo a seguir demonstra como retornar todos os valores de uma
     única coluna de um resultado, mesmo que a instrução SQL em si
     possa retornar múltiplas colunas por registro.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Busca todos os valores da primeira coluna */
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example><title>Agrupando todos os valores por uma única coluna</title>
    <para>
     O exemplo a seguir demonstra como retornar um array associativo
     agrupado pelos valores da coluna especificada no resultado. O
     array contém três chaves: valores <literal>apple</literal> e
     <literal>pear</literal> são retornados como arrays que contêm duas
     cores diferentes, enquanto <literal>watermelon</literal> é
     retornado como um array qye contém apenas uma cor.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Agrupa valores pela primeira coluna */
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(3) "red"
  }
  ["pear"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(6) "yellow"
  }
  ["watermelon"]=>
  array(1) {
    [0]=>
    string(5) "pink"
  }
}

]]>
    </screen>
   </example>
   <example><title>Instanciando uma classe para cada resultado</title>
    <para>
     O exemplo a seguir demonstra o comportamento do
     estilo de busca <constant>PDO::FETCH_CLASS</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class fruit {
    public $name;
    public $colour;
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  object(fruit)#1 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(5) "green"
  }
  [1]=>
  object(fruit)#2 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(6) "yellow"
  }
  [2]=>
  object(fruit)#3 (2) {
    ["name"]=>
    string(10) "watermelon"
    ["colour"]=>
    string(4) "pink"
  }
  [3]=>
  object(fruit)#4 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(3) "red"
  }
  [4]=>
  object(fruit)#5 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(5) "green"
  }
}
]]>
    </screen>
   </example>
   <example><title>Chamando uma função para cada resultado</title>
    <para>
     O exemplo a seguir demonstra o comportamento do
     estilo de busca <constant>PDO::FETCH_FUNC</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function fruit($name, $colour) {
    return "{$name}: {$colour}";
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(12) "apple: green"
  [1]=>
  string(12) "pear: yellow"
  [2]=>
  string(16) "watermelon: pink"
  [3]=>
  string(10) "apple: red"
  [4]=>
  string(11) "pear: green"
}
]]>
    </screen>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::fetch</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
