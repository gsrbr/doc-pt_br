<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f9c4a68ef4f89e51e6d9b905ad3ddb6492386dd3 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="function.yaz-record" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>yaz_record</refname>
  <refpurpose>Retorna um registro</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>yaz_record</methodname>
   <methodparam><type>resource</type><parameter>id</parameter></methodparam>
   <methodparam><type>int</type><parameter>pos</parameter></methodparam>
   <methodparam><type>string</type><parameter>type</parameter></methodparam>
  </methodsynopsis>
  <para>
   A função <function>yaz_record</function> inspeciona um registro no
   conjunto de resultados atual na posição especificada pelo parâmetro
   <parameter>pos</parameter>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>id</parameter></term>
     <listitem>
      <para>
       O recurso de conexão retornado por <function>yaz_connect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pos</parameter></term>
     <listitem>
      <para>
       A posição do registro. As posições dos registros em um conjunto de resultados são numeradas como 1,
       2, ... $hits, onde $hits é a contagem retornada por <function>yaz_hits</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       <parameter>type</parameter> especifica o formato do
       registro retornado.
      </para>
      <note>
       <para>
        É o aplicativo que é responsável por
        garantir que os registros sejam retornados do servidor Z39.50/SRW
        no formato correto. O tipo fornecido especifica apenas uma conversão
        a ser realizada no lado do cliente (em PHP/YAZ).
       </para>
      </note>
      <para>
       Além da conversão do registro de transferência para uma string/array, PHP/YAZ
       também é possível realizar uma conversão de conjunto de caracteres do
       registro. Especialmente para USMARC/MARC21, isso é recomendado, pois
       eles normalmente são retornados no conjunto de caracteres MARC-8,
       que não é suportado por navegadores, etc. Para especificar uma conversão, adicione
       <literal>; charset=</literal><replaceable>from</replaceable><literal>,
       </literal><replaceable>to</replaceable> onde
       <replaceable>from</replaceable> é o conjunto de caracteres original
       do registro e <replaceable>to</replaceable> é o conjunto de caracteres
       resultante (como visto pelo PHP).
      </para>
      <variablelist>
       <varlistentry>
        <term><literal>string</literal></term>
        <listitem>
         <para>
          O registro é retornado como uma string para facilitar a exibição.
          Neste modo, todos os registros MARC são convertidos para o formato linha por linha,
          já que o ISO2709 é dificilmente legível.
          Registros XML e SUTRS são retornados em seu formato original.
          GRS-1 são retornados em um formato (horrível) linha por linha.
         </para>
         <para>
          Este formato é adequado se os registros devem ser exibidos de forma rápida
          - para depuração - ou porque não é viável realizar
          uma exibição adequada.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>xml</literal></term>
        <listitem>
         <para>
          O registro é retornado como uma string XML, se possível.
          Neste modo, todos os registros MARC são convertidos para
          <link xlink:href="&url.yaz-marcxml;">MARCXML</link>.
          Registros XML e SUTRS são retornados em seu formato original.
          GRS-1 não é suportado.
         </para>
         <para>
          Este formato é semelhante a <parameter>string</parameter>, exceto que
          os registros MARC são convertidos para MARCXML.
         </para>
         <para>
          Este formato é adequado se os registros forem processados ​​posteriormente por um analisador XML
          ou processador XSLT.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>raw</literal></term>
        <listitem>
         <para>
          O registro é retornado como uma string em seu formato original.
          Este tipo é adequado para MARC, XML e SUTRS. Não funciona
          para GRS-1.
         </para>
         <para>
          Os registros MARC são retornados como uma string ISO2709. XML e SUTRS são
          retornados como strings.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>syntax</literal></term>
        <listitem>
         <para>
          A sintaxe do registro é retornada como uma string, ou seja,
          <literal>USmarc</literal>, <literal>GRS-1</literal>,
          <literal>XML</literal>, etc.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>database</literal></term>
        <listitem>
         <para>
          O nome do banco de dados associado ao registro na posição
          é retornado como uma string.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>array</literal></term>
        <listitem>
         <para>
          O registro é retornado como um array que reflete a estrutura GRS-1.
          Este tipo é adequado para MARC e GRS-1. XML e SUTRS não são
          suportados e, se o registro real for XML ou SUTRS, uma string
          vazia será retornada.
         </para>
         <para>
          O array retornado consiste em uma lista correspondente a
          cada folha/nó interno do GRS-1. Cada item da lista consiste em
          uma sublista com o primeiro elemento <emphasis>caminho</emphasis> e
          <emphasis>dados</emphasis> (se houver dados disponíveis).
         </para>
         <para>
          O caminho, que é uma string, contém uma lista de cada componente da árvore (do
          registro GRS-1 estruturado) da raiz à folha. Cada componente é
          um par de tipo de tag e valor de tag no formato
          <literal>(</literal><replaceable>type</replaceable><literal>,</literal>
          <replaceable>value</replaceable>.
         </para>
         <para>
          As tags de string normalmente têm uma tag correspondente do tipo 3.
          MARC também pode ser retornado como um array (eles são convertidos para
          GRS-1 internamente).
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o registro na posição <parameter>pos</parameter> ou uma string
   vazia se não houver nenhum registro na posição fornecida.
  </para>
  <para>
   Se nenhum registro de banco de dados existir na posição fornecida, uma string vazia será
   retornada.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Array para registro GRS-1</title>
   <para>
    Considere este registro GRS-1:
    <screen>
<![CDATA[
(4,52)Robert M. Pirsig
(4,70)
      (4,90)
            (2,7)Transworld Publishers, ltd.
]]>
    </screen>
    Este registro possui dois nós no nível raiz. O primeiro elemento no nível raiz é
    (4,52) [tipo de tag 4, valor de tag 52] e contém dados <literal>Robert M.
    Pirsig</literal>. O segundo elemento no nível raiz (4,70) possui uma subárvore com
    um único elemento (4,90). (4,90) possui ainda outra subárvore (2,7) com dados
    <literal>Transworld Publishers, ltd.</literal>.
   </para>
   <para>
    Se este registro estiver presente na posição $p, então
    <programlisting role="php">
<![CDATA[
<?php

$ar = yaz_record($id, $p, "array");
print_r($ar);

?>
]]>
    </programlisting>
    irá produzir:
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => (4,52)
            [1] => Robert M. Pirsig
        )
    [1] => Array
        (
            [0] => (4,70)
        )
    [2] => Array
        (
            [0] => (4,70)(4,90)
        )
    [3] => Array
        (
            [0] => (4,70)(4,90)(2,7)
            [1] => Transworld Publishers, ltd.
        )
)
]]>
    </screen>
   </para>
  </example>
  <example>
   <title>Trabalhando com MARCXML</title>
   <para>
    O seguinte trecho de código PHP retorna um registro MARC21/USMARC como MARCXML.
    O registro original é retornado em marc-8 (desconhecido pela maioria dos analisadores XML),
    então o convertemos para UTF-8 (que todos os analisadores XML devem suportar).
    <programlisting role="php">
<![CDATA[
<?php
$rec = yaz_record($id, $p, "xml; charset=marc-8,utf-8");
?>
]]>
    </programlisting>
   </para>
   <para>
    O registro <literal>$rec</literal> pode ser processado com o
    processador Sablotron XSLT da seguinte forma:
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php

$xslfile = 'display.xsl';
$processor = xslt_create();
$parms = array('/_xml' => $rec);
$res = xslt_process($processor, 'arg:/_xml', $xslfile, NULL, $parms);
xslt_free($processor);
$res = preg_replace("'</?html[^>]*>'", '', $res);
echo $res;

?>
]]>
    </programlisting>
   </para>
  </example>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
