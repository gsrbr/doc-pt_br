<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4639881688d3faaf0073ad71fe0a4b730aea15a0 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<reference xml:id="class.mongodb-driver-cursor" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>A classe MongoDB\Driver\Cursor</title>
 <titleabbrev>MongoDB\Driver\Cursor</titleabbrev>

 <partintro>

<!-- {{{ MongoDB\Driver\Cursor intro -->
  <section xml:id="mongodb-driver-cursor.intro">
   &reftitle.intro;
   <para>
    A classe <classname>MongoDB\Driver\Cursor</classname> encapsula
    os resultados de um comando ou consulta MongoDB e podem ser retornados por
    <methodname>MongoDB\Driver\Manager::executeCommand</methodname> ou
    <methodname>MongoDB\Driver\Manager::executeQuery</methodname>, respectivamente.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="mongodb-driver-cursor.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoDB\Driver\Cursor</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <modifier>final</modifier>
     <ooclass>
      <classname>MongoDB\Driver\Cursor</classname>
     </ooclass>

     <oointerface>
      <interfacename>MongoDB\Driver\CursorInterface</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongodb-driver-cursor')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section role="changelog">
   &reftitle.changelog;
   <para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>PECL mongodb 1.9.0</entry>
        <entry>
         Implementa <interfacename>Iterator</interfacename>.
        </entry>
       </row>
       <row>
        <entry>PECL mongodb 1.6.0</entry>
        <entry>
         Implementa <interfacename>MongoDB\Driver\CursorInterface</interfacename>,
         que estende <interfacename>Traversable</interfacename>.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </section>

  <section xml:id="mongodb-driver-cursor.examples">
   &reftitle.examples;

   <example xml:id="mongodb-driver-cursor.examples.foreach">
    <title>Lendo um conjunto de resultados</title>
    <para>
     <methodname>MongoDB\Driver\Manager::executeCommand</methodname> e
     <methodname>MongoDB\Driver\Manager::executeQuery</methodname> ambos retornam
     seus resultados como um objeto <classname>MongoDB\Driver\Cursor</classname>.
     Este objeto pode ser usado para iterar sobre conjunto de resultados do comando
     ou consulta.
    </para>
    <para>
     Como <classname>MongoDB\Driver\Cursor</classname> implementa a
     interface <interfacename>Traversable</interfacename>, pode-se simplesmente
     iterar pelo conjunto de resultados com
     <link linkend="control-structures.foreach"><literal>foreach</literal></link>.
    </para>
   <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager();

/* Insere alguns documentos para que a consulta retorne informação */
$bulkWrite = new MongoDB\Driver\BulkWrite;
$bulkWrite->insert(['name' => 'Ceres', 'size' => 946, 'distance' => 2.766]);
$bulkWrite->insert(['name' => 'Vesta', 'size' => 525, 'distance' => 2.362]);
$manager->executeBulkWrite("test.asteroids", $bulkWrite);

/* Consulta todos os itens na coleção */
$query = new MongoDB\Driver\Query( [] );

/* Consulta a coleção "asteroids" do banco de dados "test" */
$cursor = $manager->executeQuery("test.asteroids", $query);

/* $cursor agora contém um objeto que envolve o conjunto de resultados. Pode-se
 * usar foreach() para iterar por todo o resultado */
foreach($cursor as $document) {
    print_r($document);
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
stdClass Object
(
    [_id] => MongoDB\BSON\ObjectId Object
        (
            [oid] => 5a4cff2f122d3321565d8cc2
        )

    [name] => Ceres
    [size] => 946
    [distance] => 2.766
)
stdClass Object
(
    [_id] => MongoDB\BSON\ObjectId Object
        (
            [oid] => 5a4cff2f122d3321565d8cc3
        )

    [name] => Vesta
    [size] => 525
    [distance] => 2.362
}
]]>
    </screen>
   </example>

   <example xml:id="mongodb-driver-cursor.examples.tailable">
    <title>Lendo um conjunto de resultados com um cursor adaptável</title>
    <para>
     <link xlink:href="&url.mongodb.docs;core/tailable-cursors">Cursores adaptáveis</link>
     são um tipo especial de cursor no MongoDB que permite ao cliente ler alguns
     resultados e então esperar até que mais documentos fiquem disponíveis. Esses cursores
     são usado principalmente com
     <link xlink:href="&url.mongodb.docs;core/capped-collections">Coleções Limitadas</link>
     e <link xlink:href="&url.mongodb.docs;changeStreams">Fluxos de Alterações</link>.
    </para>
    <para>
     Enquanto os cursores normais podem ser iterados com <literal>foreach</literal>,
     esse método não irá funcionar com cursores adaptáveis. Quando
     <literal>foreach</literal> é usado com um cursor adaptável, a repetição irá
     terminar quando alcançar o final do conjunto de resultados inicial. A tentativa de
     continuar a iteração no cursor com um segundo
     <literal>foreach</literal> lançaria uma exceção, já que o PHP tentaria
     retroceder o cursor. De forma similar aos objetos de resultados em outros drivers de bancos de dados,
     os cursores no MongoDB suportam apenas iteração para a frente, ou seja, eles não podem
     ser retrocedidos.
    </para>
    <para>
     Para ler continuamente a partir de um cursor adaptável, o objeto Cursor
     deve ser encapsulado com um <classname>IteratorIterator</classname>. Isso
     permite que a aplicação controle diretamente a iteração do cursor, evite
     retroceder inadvertidamente o cursor e decida quando esperar por novos resultados
     ou interromper totalmente a iteração.
    </para>
    <para>
     Para demonstrar um cursor adaptável em ação, serão utilizados dois
     scripts: um "produtor" e um "consumidor". O script produtor criará uma nova
     coleção limitada usando o
     comando <link xlink:href="&url.mongodb.docs.command;create">create</link>
     e procederá à inserção de um novo documento nessa coleção a cada segundo.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager;

$manager->executeCommand('test', new MongoDB\Driver\Command([
    'create' => 'asteroids',
    'capped' => true,
    'size' => 1048576,
]));

while (true) {
    $bulkWrite = new MongoDB\Driver\BulkWrite;
    $bulkWrite->insert(['createdAt' => new MongoDB\BSON\UTCDateTime]);
    $manager->executeBulkWrite('test.asteroids', $bulkWrite);

    sleep(1);
}

?>
]]>
    </programlisting>
    <para>
     Com o script produtor ainda em execução, um segundo script consumidor pode ser
     executado para ler os documentos inseridos usando um cursor adaptável, indicado
     pelas opções <literal>tailable</literal> e <literal>awaitData</literal>
     para o método <function>MongoDB\Driver\Query::__construct</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager;

$query = new MongoDB\Driver\Query([], [
    'tailable' => true,
    'awaitData' => true,
]);

$cursor = $manager->executeQuery('test.asteroids', $query);

$iterator = new IteratorIterator($cursor);

$iterator->rewind();

while (true) {
    if ($iterator->valid()) {
        $document = $iterator->current();
        printf("Documento consumido criado em: %s\n", $document->createdAt);
    }

    $iterator->next();
}

?>
]]>
    </programlisting>
    <para>
     O script consumidor começará mostrando rapidamente todos os documentos disponíveis
     na coleção limitada (como se <literal>foreach</literal> tivesse sido usado);
     entretanto, ele não terminará ao atingir o final do conjunto de resultados inicial.
     Como o cursor pode ser seguido, chamar
     <function>IteratorIterator::next</function> bloqueará e aguardará
     resultados adicionais. <function>IteratorIterator::valid</function> também é
     usado para verificar se realmente há dados disponíveis para leitura em cada etapa.
    </para>
    <note>
     <simpara>
      Este exemplo usa a opção de consulta <literal>awaitData</literal> para
      instruir o servidor a bloquear por um curto período (por exemplo, um segundo) no
      final do conjunto de resultados antes de retornar uma resposta ao driver. Isso é
      usado para evitar que o driver faça uma sondagem agressiva no servidor quando não
      houver resultados disponíveis. A opção <literal>maxAwaitTimeMS</literal> pode ser
      usada em conjunto com <literal>tailable</literal> e
      <literal>awaitData</literal> para especificar a quantidade de tempo que o servidor
      deve bloquear quando atingir o final do o conjunto de resultados.
     </simpara>
    </note>
   </example>
  </section>

  <section role="errors">
   &reftitle.errors;
   <simpara>
    Ao iterar sobre o objeto cursor, os dados BSON são convertidos em variáveis ​
    ​PHP. Esta iteração pode causar as seguintes exceções:
   </simpara>
   <simplelist>
    <member>
     Lança uma
     <classname>MongoDB\Driver\Exception\InvalidArgumentException</classname> se
     uma classe no mapa de tipos não puder ser instanciada ou não implementar
     <interfacename>MongoDB\BSON\Unserializable</interfacename>.
    </member>
    &mongodb.throws.bson.unexpected;
   </simplelist>
  </section>

 </partintro>

 &reference.mongodb.mongodb.driver.entities.cursor;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
