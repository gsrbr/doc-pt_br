<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 648875cf73af01acdb6afaa5ca38b0bf6631bf42 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<refentry xml:id="function.cubrid-bind" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_bind</refname>
  <refpurpose>Vincula variáveis a instruções preparadas como parâmetros</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>cubrid_bind</methodname>
   <methodparam><type>resource</type><parameter>req_identifier</parameter></methodparam>
   <methodparam><type>int</type><parameter>bind_index</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>bind_value</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>bind_value_type</parameter></methodparam>
  </methodsynopsis>
  <para>
   A função <function>cubrid_bind</function> é usada para vincular valores a
   marcadores nomeados ou de ponto de interrogação na instrução SQL
   passada a <function>cubrid_prepare</function>. Se
   <parameter>bind_value_type</parameter> não for informado, string será o tipo
   padrão.
  </para>
  <note>
   <para>
    Se o tipo de dado a ser vinculado for BLOB/CLOB, o CUBRID tentará mapear o
    dado como um fluxo do PHP. Se o tipo real do valor não for um fluxo,
    o CUBRID o converterá para string e o usará como caminho completo e nome
    do arquino no sistema de arquivos do cliente.
   </para>
   <para>
    Se o tipo de dado a ser vinculado explicitamente for ENUM, o argumento <parameter>bind_value</parameter>
    deve ser o elemento da enumeração que estará no formato de string.
   </para>
   <para>
    No ambiente compartilhado CUBRID, o <parameter>bind_value_type</parameter> precisa ser incluído na
    função <function>cubrid_bind</function>.
   </para>
  </note>
  <para>
  A  tabela a seguir mostra os tipos de valores substitutos.
  </para>
  <para>
   <table>
    <title>Tipos de dados vinculados CUBRID</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Suporte</entry>
       <entry>Tipo Vinculado</entry>
       <entry>Tipo SQL Correspondente</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Suportado</entry>
       <entry>STRING</entry>
       <entry>CHAR, VARCHAR</entry>
      </row>
      <row>
       <entry></entry>
       <entry>NCHAR</entry>
       <entry>NCHAR, NVARCHAR</entry>
      </row>
      <row>
       <entry></entry>
       <entry>BIT</entry>
       <entry>BIT, VARBIT</entry>
      </row>
      <row>
       <entry></entry>
       <entry>NUMERIC ou NUMBER</entry>
       <entry>SHORT, INT, NUMERIC</entry>
      </row>
      <row>
       <entry></entry>
       <entry>FLOAT</entry>
       <entry>FLOAT</entry>
      </row>
      <row>
       <entry></entry>
       <entry>DOUBLE</entry>
       <entry>DOUBLE</entry>
      </row>
      <row>
       <entry></entry>
       <entry>TIME</entry>
       <entry>TIME</entry>
      </row>
      <row>
       <entry></entry>
       <entry>DATE</entry>
       <entry>DATE</entry>
      </row>
      <row>
       <entry></entry>
       <entry>TIMESTAMP</entry>
       <entry>TIMESTAMP</entry>
      </row>
      <row>
       <entry></entry>
       <entry>OBJECT</entry>
       <entry>OBJECT</entry>
      </row>
      <row>
       <entry></entry>
       <entry>ENUM</entry>
       <entry>ENUM</entry>
      </row>
      <row>
       <entry></entry>
       <entry>BLOB</entry>
       <entry>BLOB</entry>
      </row>
      <row>
       <entry></entry>
       <entry>CLOB</entry>
       <entry>CLOB</entry>
      </row>
      <row>
       <entry></entry>
       <entry>NULL</entry>
       <entry>NULL</entry>
      </row>
      <row>
       <entry>Não Suportado</entry>
       <entry>SET</entry>
       <entry>SET</entry>
      </row>
      <row>
       <entry></entry>
       <entry>MULTISET</entry>
       <entry>MULTISET</entry>
      </row>
      <row>
       <entry></entry>
       <entry>SEQUENCE</entry>
       <entry>SEQUENCE</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>req_identifier</parameter></term>
     <listitem><para>Identificador de requisição como um resultado de
      <function>cubrid_prepare</function>.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>bind_index</parameter></term>
     <listitem><para>Localização dos parâmetros de vinculação. Inicia com 1.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>bind_value</parameter></term>
     <listitem><para>Valor real para vinculação.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>bind_value_type</parameter></term>
     <listitem><para>Um tipo de valor a vincular. Omitido por padrão.
      Assim, o sistema usa string internamente por padrão. No entanto, é necessário
      especificar o tipo exato do valor como um argumento quando ele for NCHAR,
      BIT, ou BLOB/CLOB.</para></listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.3.1</entry>
       <entry>
        Adicionado suporte aos tipos de dados BLOB/CLOB.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <function>cubrid_bind</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$conn = cubrid_connect("localhost", 33000, "demodb", "dba");

$result = cubrid_execute($conn, "SELECT code FROM event WHERE sports='Basketball' and gender='M'");
$row = cubrid_fetch_array($result, CUBRID_ASSOC);
$event_code = $row["code"];

cubrid_close_request($result);

$game_req = cubrid_prepare($conn, "SELECT athlete_code FROM game WHERE host_year=1992 and event_code=? and nation_code='USA'");
cubrid_bind($game_req, 1, $event_code, "number");
cubrid_execute($game_req);

printf("--- Time dos Sonhos (Time de basquete olímpico masculino dos Estados Unidos de 1992) ---\n");
while ($athlete_code = cubrid_fetch_array($game_req, CUBRID_NUM)) {
    $athlete_req = cubrid_prepare($conn, "SELECT name FROM athlete WHERE code=? AND nation_code='USA' AND event='Basketball' AND gender='M'");
    cubrid_bind($athlete_req, 1, $athlete_code[0], "number");
    cubrid_execute($athlete_req);
    $row = cubrid_fetch_assoc($athlete_req);
    printf("%s\n", $row["name"]);
}

cubrid_close_request($game_req);
cubrid_close_request($athlete_req);

cubrid_disconnect($conn);
?>
]]>
   </programlisting>
   &example.outputs;
    <screen>
<![CDATA[
--- Time dos Sonhos (Time de basquete olímpico masculino dos Estados Unidos de 1992) ---
Stockton John
Robinson David
Pippen Scottie
Mullin C.
Malone Karl
Laettner C.
Jordan Michael
Johnson Earvin
Ewing Patrick
Drexler Clyde
Bird Larry
Barkley Charles
]]>
   </screen>
  </example>

  <example>
   <title>Exemplo de <function>cubrid_bind</function> com CLOB</title>
   <programlisting role="php">
<![CDATA[
<?php
$con = cubrid_connect("localhost", 33000, "demodb", "dba", "");
if ($con) {
    cubrid_execute($con,"DROP TABLE if exists php_cubrid_lob_test");
    cubrid_execute($con,"CREATE TABLE php_cubrid_lob_test (doc_content CLOB)");
    $sql = "INSERT INTO php_cubrid_lob_test(doc_content) VALUES(?)";
    $req = cubrid_prepare($con, $sql);

    $fp = fopen("book.txt", "rb");

    cubrid_bind($req, 1, $fp, "clob");
    cubrid_execute($req);
}
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Exemplo de <function>cubrid_bind</function> com BLOB</title>
   <programlisting role="php">
<![CDATA[
<?php
$con = cubrid_connect("localhost", 33000, "demodb", "dba", "");
if ($con) {
    cubrid_execute($con,"DROP TABLE if exists php_cubrid_lob_test");
    cubrid_execute($con,"CREATE TABLE php_cubrid_lob_test (image BLOB)");
    $sql = "INSERT INTO php_cubrid_lob_test(image) VALUES(?)";
    $req = cubrid_prepare($con, $sql);

    cubrid_bind($req, 1, "cubrid_logo.png", "blob");
    cubrid_execute($req);
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_execute</function></member>
    <member><function>cubrid_prepare</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
