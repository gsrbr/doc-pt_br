<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f0d11929d41082d71dcf8338a18e04412c656fa0 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.openssl-csr-new" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>openssl_csr_new</refname>
  <refpurpose>Gera um <acronym>CSR</acronym></refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>OpenSSLCertificateSigningRequest</type><type>bool</type></type><methodname>openssl_csr_new</methodname>
   <methodparam><type>array</type><parameter>distinguished_names</parameter></methodparam>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type class="union"><type>OpenSSLAsymmetricKey</type><type>null</type></type><parameter role="reference">private_key</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>array</type><type>null</type></type><parameter>options</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>array</type><type>null</type></type><parameter>extra_attributes</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>openssl_csr_new</function> gera um novo <acronym>CSR</acronym>
   com base na informação fornecida por <parameter>distinguished_names</parameter>.
  </para>
  &note.openssl.cnf;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>distinguished_names</parameter></term>
     <listitem>
      <para>
       O Nome Distinto (DN) ou campos de assunto a serem usados no
       certificado. O parâmetro <parameter>distinguished_names</parameter> é um
       array associativo onde as chaves representam os nomes de atributo dos
       Nomes Distintos e os valores podem ser strings (para valores
       simples) ou arrays (se for necessário definir múltiplos valores).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>private_key</parameter></term>
     <listitem>
      <para>
       <parameter>private_key</parameter> deve ser definido par uma chave privada que
       tenha sido gerada anteriormente por <function>openssl_pkey_new</function> (ou
       de outra forma obtida pelas outras funções da família openssl_pkey), ou
       uma variável &null;. Se o valor for uma variável &null;, uma nova chave primária será
       gerada com base no parâmetro <parameter>options</parameter> fornecido e
       será atribuída à variável informada. A parte pública correspondente da
       chave será usada para assinar o <acronym>CSR</acronym>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Por padrão, a informação no <literal>openssl.conf</literal> do sistema
       é utilizada para inicializar a requisição; uma seção do arquivo de configuração
       pode ser especificada configurando a chave <literal>config_section_section</literal> no parâmetro
       <parameter>options</parameter>. Um arquivo de configuração Openssl alternativo
       pode ser especificado configurando o valor da chave
       <literal>config</literal> para o caminho do arquivo a ser usado.
       As chaves a seguir, se estiverem presentes em <parameter>options</parameter>,
       comportam-se como suas equivalentes no <literal>openssl.conf</literal>, como
       listadas na tabela abaixo.
       <table>
        <title>Subsituição de configuração</title>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>Chave <parameter>options</parameter></entry>
           <entry>Tipo</entry>
           <entry>Equivalente no <literal>openssl.conf</literal></entry>
           <entry>Descrição</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>digest_alg</entry>
           <entry><type>string</type></entry>
           <entry>default_md</entry>
           <entry>Método de resumo ou de hash de assinatura, normalmente um dos métodos informados por <function>openssl_get_md_methods</function></entry>
          </row>
          <row>
           <entry>x509_extensions</entry>
           <entry><type>string</type></entry>
           <entry>x509_extensions</entry>
           <entry>Seleciona quais extensões devem ser usadas ao criar um certificado
           x509</entry>
          </row>
          <row>
           <entry>req_extensions</entry>
           <entry><type>string</type></entry>
           <entry>req_extensions</entry>
           <entry>Seleciona quais extensões devem ser usadas ao criar um <acronym>CSR</acronym></entry>
          </row>
          <row>
           <entry>private_key_bits</entry>
           <entry><type>int</type></entry>
           <entry>default_bits</entry>
           <entry>Especifica quantos bits devem ser usados para gerar uma chave privada</entry>
          </row>
          <row>
           <entry>private_key_type</entry>
           <entry><type>int</type></entry>
           <entry>none</entry>
           <entry>Especifica o tipo de chave privada a ser criada. Pode ser uma das
            constantes <constant>OPENSSL_KEYTYPE_DSA</constant>,
            <constant>OPENSSL_KEYTYPE_DH</constant>,
            <constant>OPENSSL_KEYTYPE_RSA</constant> ou
            <constant>OPENSSL_KEYTYPE_EC</constant>.
            O valor padrão é <constant>OPENSSL_KEYTYPE_RSA</constant>.
           </entry>
          </row>
          <row>
           <entry>encrypt_key</entry>
           <entry><type>bool</type></entry>
           <entry>encrypt_key</entry>
           <entry>Uma chave exportada (com senha) deve ser criptografada?</entry>
          </row>
          <row>
           <entry>encrypt_key_cipher</entry>
           <entry><type>int</type></entry>
           <entry>none</entry>
           <entry>
            Uma das <link linkend="openssl.ciphers">constantes de cifra</link>.
           </entry>
          </row>
          <row>
           <entry>curve_name</entry>
           <entry><type>string</type></entry>
           <entry>none</entry>
           <entry>
            Um dos nomes de curva informados por <function>openssl_get_curve_names</function>.
           </entry>
          </row>
          <row>
           <entry>config</entry>
           <entry><type>string</type></entry>
           <entry>N/A</entry>
           <entry>
            Caminho para o arquivo alternativo openssl.conf.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extra_attributes</parameter></term>
     <listitem>
      <para>
       <parameter>extra_attributes</parameter> é usado para especificar atributos
       adicionais para o <acronym>CSR</acronym>. É um array associativo
       cujas chaves são convertidas para OIDs e aplicadas como
       atributos <acronym>CSR</acronym>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o <acronym>CSR</acronym> em caso de sucesso, &true;
   se a criação do <acronym>CSR</acronym> for bem sucedida mas a assintura
   falhar&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.4.0</entry>
      <entry>
       O array associativo do parâmetro <parameter>distinguished_names</parameter> agora suporta arrays como valores,
       permitindo que múltiplos sejam especificados para um único atributo.
      </entry>
     </row>
     <row>
      <entry>8.4.0</entry>
      <entry>
       O parâmetro <parameter>extra_attributes</parameter> agora define corretamente os atributos CSR,
       ao invés de modificar o Nome Distinto do assunto como fazia antes incorretamente.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Em caso de sucesso, esta função agora retorna uma instância de <classname>OpenSSLCertificateSigningRequest</classname>;
       anteriormente, retornava um &resource; do tipo <literal>OpenSSL X.509 CSR</literal>.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>private_key</parameter> agora aceita uma instância de <classname>OpenSSLAsymmetricKey</classname>;
       anteriormente, aceitava um &resource; do tipo <literal>OpenSSL key</literal>.
      </entry>
     </row>
     <row>
      <entry>7.1.0</entry>
      <entry>
       <parameter>options</parameter> agora também suporta <literal>curve_name</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Criando um certificado autoassinado</title>
    <programlisting role="php">
<![CDATA[
<?php
// para certificados SSL de servidor, o commonName é o domínio a ser protegido
// para certificados de e-mail S/MIME, o commonName é o proprietário do endereço de e-mail
// campos de localização e identificação referem-se ao proprietário do domínio ou do e-mail a serem protegidos
$dn = array(
    "countryName" => "GB",
    "stateOrProvinceName" => "Somerset",
    "localityName" => "Glastonbury",
    "organizationName" => "The Brain Room Limited",
    "organizationalUnitName" => "PHP Documentation Team",
    "commonName" => "Wez Furlong",
    "emailAddress" => "wez@example.com"
);

// Gera um novo par de chaves privadas (e públicas)
$privkey = openssl_pkey_new(array(
    "private_key_bits" => 2048,
    "private_key_type" => OPENSSL_KEYTYPE_RSA,
));

// Gera uma requisição de assinatura de certificado
$csr = openssl_csr_new($dn, $privkey, array('digest_alg' => 'sha256'));

// Gera um certificado autoassinado, válido por 365 dias
$x509 = openssl_csr_sign($csr, null, $privkey, $days=365, array('digest_alg' => 'sha256'));

// Grava a chave privada, o CSR e o certificado autoassinado para uso posterior
openssl_csr_export($csr, $csrout)var_dump($csrout);
openssl_x509_export($x509, $certout) and var_dump($certout);
openssl_pkey_export($privkey, $pkeyout, "mypassword") and var_dump($pkeyout);

// Exibe erros que possam ter ocorrido
while (($e = openssl_error_string()) !== false) {
    echo $e . "\n";
}
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Criando um certificado ECC autoassinado (a partir do PHP 7.1.0)</title>
    <programlisting role="php">
<![CDATA[
<?php
$subject = array(
    "commonName" => "docs.php.net",
);

// Gere um novo par de chaves privadas (e públicas)
$private_key = openssl_pkey_new(array(
    "private_key_type" => OPENSSL_KEYTYPE_EC,
    "curve_name" => 'prime256v1',
));

// Gera uma requisição de assinatura de certificado
$csr = openssl_csr_new($subject, $private_key, array('digest_alg' => 'sha384'));

// Gera um certificado EC autoassinado
$x509 = openssl_csr_sign($csr, null, $private_key, $days=365, array('digest_alg' => 'sha384'));
openssl_x509_export_to_file($x509, 'ecc-cert.pem');
openssl_pkey_export_to_file($private_key, 'ecc-private.key');
?>
]]>
    </programlisting>
   </example>


  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>openssl_csr_sign</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
